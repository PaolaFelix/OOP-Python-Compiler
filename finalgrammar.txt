## Tokens 
ID       → [a-zA-Z_][a-zA-Z0-9_]*
NUM      → [0-9]+(\.[0-9]+)?
STR      → "([^"\\]|\\.)*" | '([^'\\]|\\.)*'
INDENT   → ↑      # Must be managed manually in lexer
DEDENT   → ↓      # Must be managed manually in lexer
NEWLINE  → \n

# ----------------------------
# PROGRAM ROOT
# ----------------------------

program     → { stmt }

# ----------------------------
# STATEMENTS
# ----------------------------

stmt        → "class" ID [ "(" ID ")" ] ":" block
            | "def" ID "(" [ params ] ")" ":" block
            | "import" import_path
            | "from" ID "import" ID
            | "return" [ expr ]
            | "pass"
            | "if" expr ":" block [ "else" ":" block ]
            | "while" expr ":" block
            | target "=" expr
            | expr               # e.g., function calls like foo()

# ----------------------------
# EXPRESSIONS
# ----------------------------

expr        → term { binary_op term }

term        → ID call_chain
            | NUM
            | STR
            | "(" expr ")"
            | unary_op term

target      → ID call_chain      # LHS of assignments (e.g., obj.attr)

call_chain  → { "." ID | "(" [ args ] ")" }

binary_op   → "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "and" | "or"
unary_op    → "not" | "-"

# ----------------------------
# BLOCK AND GROUPING
# ----------------------------

block       → NEWLINE INDENT stmt { stmt } DEDENT
params      → ID { "," ID }
args        → expr { "," expr }
import_path → ID { "." ID }
