import os
from preprocessor import preprocess_code
from parser import parser
from lexer import lexer
from oop_analyzer import OOPAnalyzer

def print_separator(title, char="=", width=50):
    """Imprime un separador con t√≠tulo"""
    print(f"\n{char * width}")
    print(f"{title:^{width}}")
    print(f"{char * width}")

def print_oop_analysis(analysis):
    """Imprime el an√°lisis OOP de forma organizada"""
    print_separator("AN√ÅLISIS OOP")
    
    # Clasificaci√≥n principal
    print(f"üéØ CLASIFICACI√ìN: {analysis['classification']}")
    print(f"üìä CONFIANZA: {analysis['confidence']}")
    print(f"‚≠ê PUNTUACI√ìN OOP: {analysis['score']}/10")
    
    # Resumen estad√≠stico
    summary = analysis['summary']
    print(f"\nüìà RESUMEN:")
    print(f"   ‚Ä¢ Clases definidas: {summary['classes']}")
    print(f"   ‚Ä¢ M√©todos encontrados: {summary['methods']}")
    print(f"   ‚Ä¢ Instancias creadas: {summary['instances']}")
    print(f"   ‚Ä¢ Tiene constructor: {'S√≠' if summary['has_constructor'] else 'No'}")
    
    # Razones de la clasificaci√≥n
    if analysis['reasons']:
        print(f"\n‚úÖ CRITERIOS OOP ENCONTRADOS:")
        for reason in analysis['reasons']:
            print(f"   ‚Ä¢ {reason}")
    
    # Detalles espec√≠ficos
    if analysis['details']:
        print(f"\nüîç DETALLES DEL AN√ÅLISIS:")
        for detail in analysis['details']:
            print(f"   {detail}")

def analyze_file(filename, test_path):
    """Analiza un archivo individual"""
    print(f"\n{'='*80}")
    print(f"üîç ANALIZANDO ARCHIVO: {filename}")
    print(f"{'='*80}")
    
    # Preprocesamiento
    preprocessed_code = preprocess_code(test_path)
    print_separator("C√ìDIGO PREPROCESADO")
    for i, line in enumerate(preprocessed_code, 1):
        print(f"{i:2}: {line.rstrip()}")

    # Parsing
    print_separator("PARSING")
    result = parser.parse(''.join(preprocessed_code), lexer=lexer)
    
    if result is None:
        print("‚ùå Error en el parsing. No se pudo analizar el c√≥digo.")
        return None
    
    print("‚úÖ Parsing exitoso")
    print(f"üìù AST generado: {result}")

    # An√°lisis OOP
    analyzer = OOPAnalyzer()
    oop_analysis = analyzer.analyze_ast(result)
    
    # Mostrar resultados
    print_oop_analysis(oop_analysis)
    
    # Conclusi√≥n final
    print_separator("CONCLUSI√ìN FINAL")
    classification = oop_analysis['classification']
    
    if classification == "C√ìDIGO OOP":
        print("üéâ ¬°Este c√≥digo utiliza programaci√≥n orientada a objetos!")
        print("   El c√≥digo demuestra un uso completo de conceptos OOP.")
    elif classification == "POSIBLEMENTE OOP":
        print("ü§î Este c√≥digo tiene caracter√≠sticas de OOP.")
        print("   Utiliza algunos conceptos de programaci√≥n orientada a objetos.")
    elif classification == "ELEMENTOS OOP B√ÅSICOS":
        print("‚ö†Ô∏è  Este c√≥digo tiene elementos b√°sicos de OOP.")
        print("   Usa algunos conceptos OOP pero de forma limitada.")
    else:
        print("‚ùå Este c√≥digo NO es orientado a objetos.")
        print("   No utiliza los conceptos principales de OOP.")
    
    return oop_analysis

def main():
    tests_dir = 'tests'
    
    # Verificar que la carpeta tests existe
    if not os.path.isdir(tests_dir):
        print(f"‚ùå La carpeta '{tests_dir}' no existe.")
        return
    
    # Obtener todos los archivos .py de la carpeta tests
    python_files = [f for f in os.listdir(tests_dir) if f.endswith('.py')]
    
    if not python_files:
        print(f"‚ùå No se encontraron archivos Python (.py) en la carpeta '{tests_dir}'.")
        return
    
    print(f"üìÅ Archivos encontrados en '{tests_dir}': {len(python_files)}")
    for i, filename in enumerate(python_files, 1):
        print(f"   {i}. {filename}")
    
    # Analizar cada archivo
    results = {}
    for filename in python_files:
        test_path = os.path.join(tests_dir, filename)
        analysis = analyze_file(filename, test_path)
        if analysis:
            results[filename] = analysis
    
    # Resumen final de todos los archivos
    if results:
        print(f"\n{'='*80}")
        print(f"üìä RESUMEN FINAL DE TODOS LOS ARCHIVOS")
        print(f"{'='*80}")
        
        for filename, analysis in results.items():
            classification = analysis['classification']
            score = analysis['score']
            confidence = analysis['confidence']
            
            # Emoji seg√∫n clasificaci√≥n
            emoji = "üéâ" if classification == "C√ìDIGO OOP" else \
                   "ü§î" if classification == "POSIBLEMENTE OOP" else \
                   "‚ö†Ô∏è" if classification == "ELEMENTOS OOP B√ÅSICOS" else "‚ùå"
            
            print(f"{emoji} {filename:<20} | {classification:<25} | Puntuaci√≥n: {score}/10 | Confianza: {confidence}")

if __name__ == '__main__':
    main()